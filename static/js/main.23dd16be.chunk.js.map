{"version":3,"sources":["TimedWorker/TimedWorker.js","ConfigDial/ConfigDial.js","App.js","serviceWorker.js","index.js","ConfigDial/index.js","CustomSlider/index.js","TimedWorker/index.js","CustomSlider/CustomSlider.js"],"names":["WorkerConfig","styled","div","_templateObject","LOOP_MULTIPLYER","MAX_FREQUENCY","memo","_useState","useState","_useState2","Object","_Users_craig_git_slider_perf_demo_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","timerId","setTimerId","_useState3","_useState4","isWorking","setIsWorking","_useState5","_useState6","loopCount","setLoopCount","_useState7","_useState8","frequency","setFrequency","resetWorker","clearInterval","ms","console","log","concat","setInterval","count","fibonacci","iterate","getNewInterval","useEffect","react__WEBPACK_IMPORTED_MODULE_2___default","a","createElement","_ConfigDial__WEBPACK_IMPORTED_MODULE_5___default","onChange","event","parseInt","target","value","label","max","onClick","__webpack_require__","r","__webpack_exports__","d","ConfigDial","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","props","min","type","defaultProps","Container","App","react_default","className","TimedWorker_default","CustomSlider_default","href","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","require","sliderDefault","CustomSlider","sliderVal","setSliderVal","react__WEBPACK_IMPORTED_MODULE_1___default","rc_slider__WEBPACK_IMPORTED_MODULE_2__","defaultValue"],"mappings":"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","file":"static/js/main.23dd16be.chunk.js","sourcesContent":["import React, {useEffect, useState, memo} from 'react'\n\nimport fibonacci from 'fibonacci'\nimport styled from 'styled-components'\n\nimport ConfigDial from '../ConfigDial'\n\nconst WorkerConfig = styled.div`\n  border: 1px solid black;\n  padding: 12px;\n`\n\nconst LOOP_MULTIPLYER = 100\nconst MAX_FREQUENCY = 10\n\nfunction TimedWorker() {\n  const [timerId, setTimerId] = useState(null)\n  const [isWorking, setIsWorking] = useState(false)\n  const [loopCount, setLoopCount] = useState(5)\n  const [frequency, setFrequency] = useState(5)\n\n  function toggleWorker() {\n    clearInterval(timerId)\n    setTimerId(null)\n    setIsWorking(!isWorking)\n  }\n\n  function resetWorker() {\n    if (isWorking) {\n      clearInterval(timerId)\n      setTimerId(null)\n      setTimerId(getNewInterval())\n    }\n  }\n\n  function onLoopCountChange(event) {\n    setLoopCount(parseInt(event.target.value))\n  }\n\n  function onFrequencyChange(event) {\n    setFrequency(parseInt(event.target.value))\n  }\n\n  function getNewInterval() {\n    const ms = 100 * (MAX_FREQUENCY - frequency + 1);\n    console.log(`Worker now set to ${ms}ms`)\n\n    return setInterval(() => {\n      console.log('Starting work...')\n      let count = 0;\n\n      while (count++ < (loopCount * LOOP_MULTIPLYER)) {\n        fibonacci.iterate(count)\n      }\n\n      console.log('Finished!');\n    }, ms)\n  }\n\n  useEffect(() => {\n    if (isWorking) {\n      resetWorker()\n    }\n\n    return () => clearInterval(timerId)\n  }, [isWorking, frequency, loopCount])\n\n  return (<WorkerConfig>\n    <ConfigDial\n      onChange={onLoopCountChange}\n      value={loopCount}\n      label={'Intensity'}\n    />\n    <ConfigDial\n      onChange={onFrequencyChange}\n      value={frequency}\n      label={'Frequency'}\n      max={MAX_FREQUENCY}\n    />\n\n    <div>\n      Worker status:\n      <button\n        onClick={toggleWorker}\n      >{isWorking ? 'ON' : 'OFF'}\n      </button>\n    </div>\n  </WorkerConfig>);\n}\n\nexport default memo(TimedWorker)","import React from 'react'\nimport PropTypes from 'prop-types'\n\nexport default function ConfigDial(props) {\n  const {max, onChange, value, label, min} = props\n\n  return (<div>\n    <span>{label} ({min} - {max})</span>\n    < input\n      type={'number'}\n      onChange={onChange}\n      value={value}\n      max={max}\n    />\n  </div>);\n}\n\nConfigDial.defaultProps = {\n  max: 10,\n  min: 1,\n  value: 5,\n};\n\nConfigDial.propTypes = {\n  max: PropTypes.number,\n  min: PropTypes.number,\n  onChange: PropTypes.func,\n  value: PropTypes.number,\n  lable: PropTypes.string,\n}","import React, {Component} from 'react';\nimport styled from 'styled-components';\n\nimport CustomSlider from './CustomSlider'\nimport TimedWorker from './TimedWorker'\n\nconst Container = styled.div`\n  margin: 40px;\n`;\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Container>\n          <h1>UX Perf with Background CPU Task</h1>\n          <TimedWorker/>\n          <CustomSlider/>\n\n          <h3>What is this?</h3>\n          <p>This application demonstrates the effect of background CPU tasks on UX in\n          JavaScript's single-threaded environment. Background work is simulated by computing\n          Fibonacci numbers from 0 to n, for n iterations. Framerate while dragging the slider\n          should degrade as n increases. Turn the background worker on/off and adjust its parameters\n          using the controls above.</p>\n\n          <p>This demo uses <a href={'https://www.npmjs.com/package/rc-slider'}>rc-slider</a> with default settings,\n          and does not perform any action on change.</p>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = require('./ConfigDial')","module.exports = require('./CustomSlider')","module.exports = require('./TimedWorker')","import React, {useState} from 'react'\nimport Slider from 'rc-slider'\n\nimport 'rc-slider/assets/index.css'\n\nconst sliderDefault = 50;\n\nexport default function CustomSlider() {\n  const [sliderVal, setSliderVal] = useState(sliderDefault)\n\n  return (<div>\n    <h2>Slider value: {sliderVal}</h2>\n    <Slider\n      onChange={setSliderVal}\n      defaultValue={sliderDefault}\n    />\n  </div>)\n}"],"sourceRoot":""}