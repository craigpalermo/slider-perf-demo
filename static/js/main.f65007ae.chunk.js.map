{"version":3,"sources":["CustomSlider/index.js","TimedWorker/index.js","CustomSlider/CustomSlider.js","TimedWorker/TimedWorker.js","ConfigDial/ConfigDial.js","Readme.js","App.js","serviceWorker.js","index.js","ConfigDial/index.js"],"names":["module","exports","require","sliderDefault","CustomSlider","_useState","useState","_useState2","Object","_Users_craig_git_slider_perf_demo_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","sliderVal","setSliderVal","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","rc_slider__WEBPACK_IMPORTED_MODULE_2__","onChange","defaultValue","handleStyle","height","width","marginTop","marginLeft","WorkerConfig","styled","Box","_templateObject","props","theme","colors","borderGray","LOOP_MULTIPLYER","MAX_FREQUENCY","memo","timerId","setTimerId","_useState3","_useState4","isWorking","setIsWorking","_useState5","_useState6","loopCount","setLoopCount","_useState7","_useState8","frequency","setFrequency","resetWorker","clearInterval","ms","console","log","concat","setInterval","count","fibonacci","iterate","getNewInterval","useEffect","react__WEBPACK_IMPORTED_MODULE_2___default","_ConfigDial__WEBPACK_IMPORTED_MODULE_6___default","event","parseInt","target","value","label","max","pcln_design_system__WEBPACK_IMPORTED_MODULE_5__","m","onClick","__webpack_require__","r","__webpack_exports__","d","ConfigDial","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","pcln_design_system__WEBPACK_IMPORTED_MODULE_1__","min","align","mr","type","defaultProps","input","Readme","react_default","react_markdown_default","source","Container","Flex","Demo","_templateObject2","App","className","index_esm","flexDirection","bg","TimedWorker_default","CustomSlider_default","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f65007ae.chunk.js","sourcesContent":["module.exports = require('./CustomSlider')","module.exports = require('./TimedWorker')","import React, {useState} from 'react'\nimport Slider from 'rc-slider'\n\nimport 'rc-slider/assets/index.css'\n\nconst sliderDefault = 50;\n\nexport default function CustomSlider() {\n  const [sliderVal, setSliderVal] = useState(sliderDefault)\n  const handleStyle = {\n    height: '24px',\n    width: '24px',\n    marginTop: '-11px',\n    marginLeft: '-11px',\n  }\n\n  return (<div>\n    <h3>Slider value: {sliderVal}</h3>\n    <Slider\n      onChange={setSliderVal}\n      defaultValue={sliderDefault}\n      handleStyle={[handleStyle]}\n    />\n  </div>)\n}","import React, {useEffect, useState, memo} from 'react'\n\nimport fibonacci from 'fibonacci'\nimport styled from 'styled-components'\nimport {Button, Box, Text, Flex} from 'pcln-design-system'\n\nimport ConfigDial from '../ConfigDial'\n\nconst WorkerConfig = styled(Box)`\n  border: 1px solid ${props => props.theme.colors.borderGray};\n  padding: 12px;\n`\n\nconst LOOP_MULTIPLYER = 100\nconst MAX_FREQUENCY = 10\n\nfunction TimedWorker() {\n  const [timerId, setTimerId] = useState(null)\n  const [isWorking, setIsWorking] = useState(false)\n  const [loopCount, setLoopCount] = useState(5)\n  const [frequency, setFrequency] = useState(5)\n\n  function toggleWorker() {\n    clearInterval(timerId)\n    setTimerId(null)\n    setIsWorking(!isWorking)\n  }\n\n  function resetWorker() {\n    if (isWorking) {\n      clearInterval(timerId)\n      setTimerId(null)\n      setTimerId(getNewInterval())\n    }\n  }\n\n  function onLoopCountChange(event) {\n    setLoopCount(parseInt(event.target.value))\n  }\n\n  function onFrequencyChange(event) {\n    setFrequency(parseInt(event.target.value))\n  }\n\n  function getNewInterval() {\n    const ms = 100 * (MAX_FREQUENCY - frequency + 1);\n    console.log(`Worker now set to ${ms}ms`)\n\n    return setInterval(() => {\n      console.log('Starting work...')\n      let count = 0;\n\n      while (count++ < (loopCount * LOOP_MULTIPLYER)) {\n        fibonacci.iterate(count)\n      }\n\n      console.log('Finished!');\n    }, ms)\n  }\n\n  useEffect(() => {\n    if (isWorking) {\n      resetWorker()\n    }\n\n    return () => clearInterval(timerId)\n  }, [isWorking, frequency, loopCount])\n\n  return (<WorkerConfig>\n    <ConfigDial\n      onChange={onLoopCountChange}\n      value={loopCount}\n      label={'Intensity'}\n    />\n    <ConfigDial\n      onChange={onFrequencyChange}\n      value={frequency}\n      label={'Frequency'}\n      max={MAX_FREQUENCY}\n    />\n\n    <Flex>\n      <Text m={2}>Worker status:</Text>\n      <Button\n        onClick={toggleWorker}\n      >{isWorking ? 'ON' : 'OFF'}\n      </Button>\n    </Flex>\n  </WorkerConfig>);\n}\n\nexport default memo(TimedWorker)","import React from 'react'\nimport PropTypes from 'prop-types'\nimport {Box, Flex, Text, Input} from 'pcln-design-system'\n\nexport default function ConfigDial(props) {\n  const {max, onChange, value, label, min} = props\n\n  return (<Flex\n    align={'center'}\n    m={2}\n  >\n    <Box>\n      <Text mr={2}>{label} ({min} - {max})</Text>\n    </Box>\n    <Box>\n      <Input\n        type={'number'}\n        onChange={onChange}\n        value={value}\n        max={max}\n      /></Box>\n  </Flex>);\n}\n\nConfigDial.defaultProps = {\n  max: 10,\n  min: 1,\n  value: 5,\n};\n\nConfigDial.propTypes = {\n  max: PropTypes.number,\n  min: PropTypes.number,\n  onChange: PropTypes.func,\n  value: PropTypes.number,\n  lable: PropTypes.string,\n}","import React from 'react'\nimport ReactMarkdown from 'react-markdown'\n\nconst input = `\n# Effect of Background JS Processes on UX Performance with React\n_Craig Palermo - March 10, 2019_\n\n## Problem\nUI components built with React that depend on continually updating\nstate during user interaction are prone to fluctuations of activity\non the JS main thread that might delay these updates. This can result\nin a temporarily unresponsive UI and confusing experience.\n\nWhile any number of sources could cause this background activity, I've observed scripts such as\nGoogle Tag Manager and various fraud protection tools attach various event listeners\nthat can cause this type of delay. You can observe this on your own site by profiling\nJS activity while the sit is idle, as well as when triggering user events, such as \\`mouseover\\`,\n \\`click\\`, \\`mouseenter\\`, etc.\n\n## Demo\nThe frequency of activity that blocks the main thread, as well as the duration that\nthe browser spends on that work, can both affect the degree to which the UX is noticeably\naffected. Try adjusting each of these values, then interacting with the slider. Notice\nhow different combinations result in various degrees of degradation in the user experience.\n\nTry this on a mobile device as well to see how difficult this\nlag can make interactions for mobile users, especially those with older devices.\n`\n\nexport default function Readme() {\n  return <ReactMarkdown source={input}/>\n}","import React, {Component} from 'react';\nimport styled from 'styled-components';\nimport {ThemeProvider, Flex, Box} from 'pcln-design-system'\n\nimport CustomSlider from './CustomSlider'\nimport TimedWorker from './TimedWorker'\nimport Readme from './Readme'\n\nconst Container = styled(Flex)`\n  max-width: 680px;\n`;\n\nconst Demo = styled(Box)`\n  border-radius: 10px;\n  margin-top: 24px;\n  padding: 24px;\n`\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <ThemeProvider>\n          <Container\n            flexDirection={'column'}\n            m={4}\n          >\n            <Readme/>\n            <Demo bg={'lightGray'}>\n              <TimedWorker/>\n              <CustomSlider/>\n            </Demo>\n          </Container>\n        </ThemeProvider>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = require('./ConfigDial')"],"sourceRoot":""}